//
// To start Solr, run:
//
//     gradle runSolr
//
// To start Solr with sharding enabled, run:
//
//     gradle runSolrShards
//

import org.gradle.api.plugins.jetty.JettyRunWar

apply plugin: 'java'
apply plugin: 'jetty'

ext {
    // Port to listen to
    listenPort = 8983

    // Solr home directory
    solrHomeDir = "./mediacloud"

    // Solr data directory
    solrDataDir = "./../data/solr"

    // Lucene match version ("controls what version of Lucene various
    // components of Solr adhere to"), e.g. "LUCENE_46" or "4.10.3"
    //
    // This value is stored in Solr distribution's example "solrconfig.xml",
    // under "<luceneMatchVersion>" element.
    luceneMatchVersion = "LUCENE_46"

    // Package versions
    solrVersion = "4.6.0"
    postgresqlVersion = "9.3-1104-jdbc41"
    slf4jSimpleVersion = "1.7.12"
    commonsLoggingVersion = "1.2"
    jUnitVersion = "4.12"
}

repositories {
    mavenCentral()
    maven {
        // for org.restlet.jee:org.restlet dependency
        url "http://maven.restlet.org"
    }
}

// custom configuration for running the webapp
configurations {
    solrWebApp
    additionalSolrJars
    additionalJettyLoggingJars
}

dependencies {
    solrWebApp "org.apache.solr:solr:${solrVersion}@war"

    // Additional Solr JARs
    additionalSolrJars "org.apache.solr:solr-analysis-extras:${solrVersion}"
    additionalSolrJars "org.apache.solr:solr-cell:${solrVersion}"
    additionalSolrJars "org.apache.solr:solr-clustering:${solrVersion}"
    additionalSolrJars "org.apache.solr:solr-dataimporthandler:${solrVersion}"
    additionalSolrJars "org.apache.solr:solr-dataimporthandler-extras:${solrVersion}"
    additionalSolrJars "org.apache.solr:solr-langid:${solrVersion}"
    additionalSolrJars "org.apache.solr:solr-solrj:${solrVersion}"
    additionalSolrJars "org.apache.solr:solr-uima:${solrVersion}"
    additionalSolrJars "org.apache.solr:solr-velocity:${solrVersion}"
    additionalSolrJars "org.postgresql:postgresql:${postgresqlVersion}"

    // Jetty's JARs for logging
    additionalJettyLoggingJars "org.slf4j:slf4j-simple:${slf4jSimpleVersion}"
    additionalJettyLoggingJars "commons-logging:commons-logging:${commonsLoggingVersion}"

    testCompile "junit:junit:${jUnitVersion}"
    testCompile "org.apache.solr:solr-test-framework:${solrVersion}"
    testCompile "org.slf4j:slf4j-simple:${slf4jSimpleVersion}"
    testCompile "commons-logging:commons-logging:${commonsLoggingVersion}"
}

// Destination directory
buildDir = "solr-dist"

// Where to look for web app
project.webAppDirName = "solr-dist"

// Web application directory
def explodedWebAppDir = "${buildDir}/explodedWebAppDir"

//
// ---
//

task copyWar(type:Copy) {
    into explodedWebAppDir 
    from zipTree(configurations.solrWebApp.singleFile)
}

task copyAdditionalSolrJars(type:Copy) {
    into explodedWebAppDir + "/WEB-INF/lib/"
    from configurations.additionalSolrJars
}

task copyAdditionalJettyLoggingJars(type:Copy) {
    into explodedWebAppDir + "/WEB-INF/lib/"
    from configurations.additionalJettyLoggingJars
}

// Prepare for running Solr
task prepareForSolrRun(dependsOn: ['copyWar', 'copyAdditionalSolrJars', 'copyAdditionalJettyLoggingJars']) {

    // Jetty properties
    System.setProperty("org.eclipse.jetty.server.Request.maxFormContentSize", Integer.toString(4 * 1024 * 1024))

    // Solr properties
    System.setProperty("solr.solr.home", solrHomeDir)
    System.setProperty("mediacloud.luceneMatchVersion", luceneMatchVersion)

    // Set data dirs for all collections
    File collectionsDir = file(solrHomeDir + "/collections")
    FileCollection collections = files { collectionsDir.listFiles() }
    collections.each {File collection ->
        if (collection.isDirectory()) {
            String collectionName = collection.name

            if ( collectionName != "base_collection" ) {
            
                // Create data directory if it doesn't exist
                File collectionDataDir = new File(solrDataDir + "/no-sharding/" + collectionName + "/")
                if (! collectionDataDir.isDirectory()) {
                    println "Collection's '" + collectionName +
                            "' data directory '" + collectionDataDir.getPath() +
                            "' does not exist, creating..."
                    collectionDataDir.mkdirs()
                }

                // Make sure that solrconfig.xml exists
                File solrConfigFile = new File(solrHomeDir + "/collections/" + collectionName + "/conf/solrconfig.xml")
                if (! solrConfigFile.exists()) {
                    throw new GradleException("solrconfig.xml at '" + solrConfigFile.getPath() + "' does not exist.")
                }

                String dataDirJavaProperty = "mediacloud." + collectionName + ".data.dir"

                // Make sure that solrconfig.xml contains correct "dataDir"
                String solrConfigFileContents = solrConfigFile.getText("UTF-8")
                String expectedDataDirXML = "<dataDir>\${" + dataDirJavaProperty + "}</dataDir>"
                if (! solrConfigFileContents.contains( expectedDataDirXML )) {
                    throw new GradleException("solrconfig.xml at '" + solrConfigFile.getPath() +
                        "' does not contain an expected <dataDir> XML element which should look like this: " +
                        expectedDataDirXML)
                }

                // Set Java property so that Solr can later read it
                System.setProperty(dataDirJavaProperty, collectionDataDir.getPath())
            }
        }
    }
}

// Run Solr
task runSolr(type: JettyRun, dependsOn: ['prepareForSolrRun']) {
    description 'Run Apache Solr.'
    // Jetty configuration
    httpPort = listenPort
    contextPath = 'solr'
    webAppSourceDirectory = file(explodedWebAppDir)
}

// Run Solr with sharding enabled
task runSolrShards(type: JettyRun, dependsOn: ['prepareForSolrRun']) {
    description 'Run Apache Solr with sharding enabled.'
    // Jetty configuration
    httpPort = listenPort
    contextPath = 'solr'
    webAppSourceDirectory = file(explodedWebAppDir)
}
