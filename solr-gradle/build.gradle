//
// To start Solr, run:
//
//     gradle runSolr
//

import org.gradle.api.plugins.jetty.JettyRunWar
import org.apache.commons.io.FileUtils

buildscript {
  repositories {
      mavenCentral()
  }
    dependencies {
      classpath 'org.apache.commons:commons-io:1.3.2'
  }
}


apply plugin: 'java'
apply plugin: 'jetty'

ext {
    // Port to listen to
    listenPort = 8983

    // Number of shards
    numShards = 4

    // Solr home directory (relative to build.gradle)
    solrHomeDir = "./mediacloud"

    // Solr data directory (relative to build.gradle)
    solrDataDir = "./../data/solr"

    // Bootstrap collection name for ZooKeeper
    zooKeeperBootstrapCollection = "collection1"

    // Zookeeper config name
    zooKeeperConfigName = "mediacloud"

    // Lucene match version ("controls what version of Lucene various
    // components of Solr adhere to"), e.g. "LUCENE_46" or "4.10.3"
    //
    // This value is stored in Solr distribution's example "solrconfig.xml",
    // under "<luceneMatchVersion>" element.
    luceneMatchVersion = "LUCENE_46"

    // Package versions
    solrVersion = "4.6.0"
    postgresqlVersion = "9.3-1104-jdbc41"
    slf4jSimpleVersion = "1.7.12"
    commonsLoggingVersion = "1.2"
    jUnitVersion = "4.12"
}

repositories {
    mavenCentral()
    maven {
        // for org.restlet.jee:org.restlet dependency
        url "http://maven.restlet.org"
    }
}

// custom configuration for running the webapp
configurations {
    solrWebApp
    additionalSolrJars
    additionalJettyLoggingJars
}

dependencies {
    solrWebApp "org.apache.solr:solr:${solrVersion}@war"

    // Additional Solr JARs
    additionalSolrJars "org.apache.solr:solr-analysis-extras:${solrVersion}"
    additionalSolrJars "org.apache.solr:solr-cell:${solrVersion}"
    additionalSolrJars "org.apache.solr:solr-clustering:${solrVersion}"
    additionalSolrJars "org.apache.solr:solr-dataimporthandler:${solrVersion}"
    additionalSolrJars "org.apache.solr:solr-dataimporthandler-extras:${solrVersion}"
    additionalSolrJars "org.apache.solr:solr-langid:${solrVersion}"
    additionalSolrJars "org.apache.solr:solr-solrj:${solrVersion}"
    additionalSolrJars "org.apache.solr:solr-uima:${solrVersion}"
    additionalSolrJars "org.apache.solr:solr-velocity:${solrVersion}"
    additionalSolrJars "org.postgresql:postgresql:${postgresqlVersion}"

    // Jetty's JARs for logging
    additionalJettyLoggingJars "org.slf4j:slf4j-simple:${slf4jSimpleVersion}"
    additionalJettyLoggingJars "commons-logging:commons-logging:${commonsLoggingVersion}"

    testCompile "junit:junit:${jUnitVersion}"
    testCompile "org.apache.solr:solr-test-framework:${solrVersion}"
    testCompile "org.slf4j:slf4j-simple:${slf4jSimpleVersion}"
    testCompile "commons-logging:commons-logging:${commonsLoggingVersion}"
}

// Destination directory
buildDir = "solr-dist"

// Where to look for web app
project.webAppDirName = "solr-dist"

// Web application directory
def explodedWebAppDir = new File("${buildDir}/explodedWebAppDir").getAbsolutePath()
logger.info("explodedWebAppDir: " + explodedWebAppDir)

//
// ---
//

task copyWar(type: Copy) {
    into explodedWebAppDir 
    from zipTree(configurations.solrWebApp.singleFile)
}

task copyAdditionalSolrJars(type: Copy) {
    into explodedWebAppDir + "/WEB-INF/lib/"
    from configurations.additionalSolrJars
}

task copyAdditionalJettyLoggingJars(type: Copy) {
    into explodedWebAppDir + "/WEB-INF/lib/"
    from configurations.additionalJettyLoggingJars
}

task createShards() {
    File solrHomeDirFile = new File(solrHomeDir)
    for (int shard = 1; shard <= numShards; ++shard) {
        String shardDir = solrDataDir + "/mediacloud-shard-" + shard
        File shardDirFile = new File(shardDir)
        if (shardDirFile.exists()) {
            logger.info("Shard " + shard + " already exists at " + shardDirFile)
        } else {
            logger.info("Shard " + shard + " does not exist, copying " + solrHomeDirFile + " to " + shardDirFile + "...")

            // Automagically resolves symlinks
            FileUtils.copyDirectory(solrHomeDirFile, shardDirFile)

            // Remove template directory
            File baseCollectionDir = new File(shardDir + "/collections/base_collection")
            if (baseCollectionDir.exists()) {
                FileUtils.deleteDirectory(baseCollectionDir)
            } else {
                // Unexpectedly missing, maybe got renamed?
                logger.warn("'base_collection' directory does not exist at " + baseCollectionDir)
            }
        }
    }
}

// Prepare for running Solr
task prepareForSolrRun(dependsOn: [
    'copyWar',
    'copyAdditionalSolrJars',
    'copyAdditionalJettyLoggingJars',
    'createShards'
]) {

    // FIXME
    int shardToStart = 1

    String shardSolrHomeDir = solrDataDir + "/mediacloud-shard-" + shardToStart
    if (! new File(shardSolrHomeDir).exists()) {
        throw new GradleException("'solr.solr.home' for shard " + shardToStart + " does not exist at " + shardSolrHomeDir)
    }

    String bootstrapConfDir = shardSolrHomeDir + "/collections/" + zooKeeperBootstrapCollection + "/conf"
    if (! new File(bootstrapConfDir).exists()) {
        throw new GradleException("'bootstrap_confdir' for shard " + shardToStart + " does not exist at " + bootstrapConfDir)
    }

    // Shards
    System.setProperty("zkRun", "")
    System.setProperty("bootstrap_confdir", bootstrapConfDir)
    System.setProperty("numShards", Integer.toString(numShards))
    System.setProperty("collection.configName", zooKeeperConfigName)

    // Solr properties
    System.setProperty("solr.solr.home", shardSolrHomeDir)
    System.setProperty("mediacloud.luceneMatchVersion", luceneMatchVersion)

    // Jetty properties
    System.setProperty("org.eclipse.jetty.server.Request.maxFormContentSize", Integer.toString(4 * 1024 * 1024))
}

// Run Solr
task runSolr(type: JettyRun, dependsOn: ['prepareForSolrRun']) {
    description 'Run Apache Solr.'
    // Jetty configuration
    httpPort = listenPort
    contextPath = 'solr'
    webAppSourceDirectory = file(explodedWebAppDir)
}
