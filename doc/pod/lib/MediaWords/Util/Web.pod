=head1 NAME

MediaWords::Util::Web


=head1 DESCRIPTION

various functions to make downloading web pages easier and faster, including parallel
and cached fetching.


=head1 REQUIRES

L<MediaWords::Util::Config> 

L<MediaWords::Util::Paths> 

L<Readonly> 

L<Storable> 

L<HTTP::Status> 

L<LWP::UserAgent::Determined> 

L<LWP::UserAgent> 

L<FindBin> 

L<File::Temp> 

L<MediaWords::CommonLibs> 

L<Modern::Perl> 


=head1 METHODS

=head2 ParallelGet

 ParallelGet();

get urls in parallel by using an external, forking script.
we use this approach because LWP is not thread safe and
LWP::Parallel::User is not fully parallel and no longer
works with modern LWP in any case.


=head2 UserAgent

 UserAgent();

return a user agent with media cloud default settings


=head2 UserAgentDetermined

 UserAgentDetermined();

return a "determined" (retrying) user agent with media cloud default settings


=head2 cache_link_downloads

 cache_link_downloads();

cache link downloads $LINK_CACHE_SIZE at a time so that we can do them in parallel.
this doesn't actually do any caching -- it just sets the list of
links so that they can be done $LINK_CACHE_SIZE at a time by get_cached_link_download.


=head2 get_cached_link_download

 get_cached_link_download();

if the url has been precached, return it, otherwise download the current links and the next $LINK_CACHE_SIZE links


=head2 get_cached_link_download_redirect_url

 get_cached_link_download_redirect_url();

get the redirected url from the cached download for the url.
if no redirected url is found, just return the given url.


=head2 get_decoded_content

 get_decoded_content();

simple get for a url using the UserAgent above. return the decoded content
if the response is successful and undef if not.


=head2 get_meta_refresh_response

 get_meta_refresh_response();

if the response has a meta refresh tag, fetch the meta refresh content and
insert the response into the redirect response chain as a normal redirect


=head2 get_meta_refresh_url

 get_meta_refresh_url();

given the response and request, parse the content for a meta refresh url and return if present.
otherwise, return undef


=head2 get_original_request

 get_original_request();

walk back from the given response to get the original request that generated the response.


=head2 get_original_url_from_momento_archive_url

 get_original_url_from_momento_archive_url();

=head2 response_error_is_client_side($)

 response_error_is_client_side($)();

Return true if the response's error was generated by LWP itself and not by
the server



=cut

